// new module script
int CountToken(this String*, String token){
  String sub = this.Copy();
  int count = 0;
  int cur = 0;
  int next = 0;
  
  while(sub.Length > 0){ 
    if(sub.IndexOf(token)==-1){
      return count;  
    }
  
    sub = sub.Substring(sub.IndexOf(token)+token.Length, sub.Length);
    count++;
  }  
  return count;  
}

String[] Split(this String*, String token){
  int count = this.CountToken(token);
  
  if(count<=0){
    String r[] = new String[1];
    r[0] = null;
    return r;  
  }
  
  String r[] = new String[count+2];
  String sub = this.Copy();
  
  int i = 0;
  int cur = 0;
  
  while(i < count){     
    cur = sub.IndexOf(token);
    if(cur==-1) cur=sub.Length;

    r[i] = sub.Substring(0, cur);
    
    sub = sub.Substring(sub.IndexOf(token)+token.Length, sub.Length);
     
    i++;
  }
  r[i] = sub.Substring(0, sub.Length);
  i++;
  r[i] = null;
  return  r;
}

Matrix* Matrix::Set(int row, int column, float value){
  if(row>=0 && row<this.row_count &&
     column>=0 && column<this.column_count) {

    this.v[row*this.column_count+column] = value;

    return this;
  }
}

float Matrix::Get(int row, int column){
  return this.v[row*this.column_count+column];
}

static Matrix* Matrix::Create(int rows,  int columns,  MatrixType type,  float value){
  Matrix* m = new Matrix;

  m.row_count = rows;
  m.column_count = columns;
  m.cell_count = rows * columns;

  if(type== eMT_Identity){
    for(int i=0; i<m.row_count; i++){
      for(int j=0; i<m.column_count; j++){
        if(i==j){
          m.Set(i, j, 1.0);
        } else {
          m.Set(i, j, 0.0);
        }
      }
    }
  } else {
    for(int i=0; i<m.row_count; i++){
      for(int j=0; i<m.column_count; j++){
        m.Set(i, j, value);
      }
    }
  }

  return m;
}



static Matrix* Matrix::CreateFromString(String s){
  if(s == null) return null;   
  if(s.Length<=3) return null;   
  if(!(s.StartsWith("{") && s.EndsWith("}"))) return null; 
    
  s = s.Replace("{","");
  s = s.Substring(0, s.Length-2);
  
  String s1[]=s.Split("],");
  
  int row_count=0;
  while(s1[row_count] != null) row_count++;
  
  
  
  
  
  
  
}

Matrix* Matrix::Clone() {
  Matrix* m = new Matrix;

  m.row_count = this.row_count;
  m.column_count = this.column_count;
  m.cell_count = this.cell_count;
  
  for(int i=0; i<m.cell_count; i++){
    m.v[i] = this.v[i];    
  }
  
  return m;
}

Matrix* Matrix::Add(Matrix* m){
  if(m.row_count == this.row_count && m.column_count == this.column_count){
    Matrix* r = new Matrix;
    r.row_count = m.row_count;
    r.column_count = m.column_count;
    r.cell_count = m.cell_count;

    for(int i=0; i<m.row_count; i++){
      for(int j=0; i<m.column_count; j++){
         r.Set(i, j, this.Get(i, j) + m.Get(i, j));
      }
    }

    return r;
  }
  return null;
}

Matrix* Matrix::Sub(Matrix* m){
  if(m.row_count == this.row_count && m.column_count == this.column_count){
    Matrix* r = new Matrix;
    r.row_count = m.row_count;
    r.column_count = m.column_count;
    r.cell_count = m.cell_count;

    for(int i=0; i<m.row_count; i++){
      for(int j=0; i<m.column_count; j++){
         r.Set(i, j, this.Get(i, j) - m.Get(i, j));
      }
    }

    return r;
  }
  return null;
}

Matrix* Matrix::Mul(Matrix* m){
  if(this.column_count == m.row_count){
    Matrix* r = new Matrix;
    r.row_count = this.row_count;
    r.column_count = m.column_count;
    r.cell_count = r.row_count*r.column_count;

    for(int i=0; i<r.row_count; i++){
      for(int j=0; i<r.column_count; j++){
        float cell=0.0;
        for(int k=0; k<m.row_count; k++){
          cell+=this.Get(i, k)*m.Get(k, j);
        }

        r.Set(i, j, cell);
      }
    }
    return r;
  }
  return null;
}

Matrix* Matrix::MulNum(float f) {
  Matrix* r = this.Clone();
 
  for(int i=0; i<r.cell_count; i++){
    r.v[i] = r.v[i]*f;    
  }
  return r;
}

Matrix* Matrix::DivNum(float f) {
  Matrix* r = this.Clone();
 
  for(int i=0; i<r.cell_count; i++){
    r.v[i] = r.v[i]/f;    
  }
  return r;
}

Matrix* Matrix::Pow(int n){
  if(this.row_count != this.column_count){
    return null;
  }
  
  Matrix* m = this.Clone();
  for(int i=1; i<n; i++){
    m = m.Mul(m);
  }
  return m;
}

float Matrix::MaxCell() {
  float r = this.v[0];
  
  for(int i=0; i<this.cell_count; i++){
    if(this.v[i]>r) r=this.v[i];
  }
  
  return r;
}

float Matrix::MinCell() {
  float r = this.v[0];
  
  for(int i=0; i<this.cell_count; i++){
    if(this.v[i]<r) r=this.v[i];
  }
  
  return r;
}

float Matrix::Determinant(){
  if(this.row_count != this.column_count){
    return 0.0;
  }

  if(this.row_count == 1) {
    return this.Get(0, 0);
  } else if(this.row_count == 2) {
    return (this.Get(0,0) * this.Get(1,1)) - (this.Get(0,1) * this.Get(1,0));
  } else if(this.row_count == 3) {
    float r=0.0;
    r = r + this.Get(0, 0) * (this.Get(1, 1) * this.Get(2, 2) - this.Get(2, 1) * this.Get(1, 2));
    r = r - this.Get(0, 1) * (this.Get(1, 0) * this.Get(2, 2) - this.Get(1, 2) * this.Get(2, 0));
    r = r + this.Get(0, 2) * (this.Get(1, 0) * this.Get(2, 1) - this.Get(1, 1) * this.Get(2, 0));
    return r;
  } else if(this.row_count == 4){
    float r=0.0;
    r = r + this.Get(0,3) * this.Get(1,2) * this.Get(2,1) * this.Get(3,0) - this.Get(0,2) * this.Get(1,3) * this.Get(2,1) * this.Get(3,0);
    r = r - this.Get(0,3) * this.Get(1,1) * this.Get(2,2) * this.Get(3,0) + this.Get(0,1) * this.Get(1,3) * this.Get(2,2) * this.Get(3,0);
    r = r + this.Get(0,2) * this.Get(1,1) * this.Get(2,3) * this.Get(3,0) - this.Get(0,1) * this.Get(1,2) * this.Get(2,3) * this.Get(3,0);
    r = r - this.Get(0,3) * this.Get(1,2) * this.Get(2,0) * this.Get(3,1) + this.Get(0,2) * this.Get(1,3) * this.Get(2,0) * this.Get(3,1);
    r = r + this.Get(0,3) * this.Get(1,0) * this.Get(2,2) * this.Get(3,1) - this.Get(0,0) * this.Get(1,3) * this.Get(2,2) * this.Get(3,1);
    r = r - this.Get(0,2) * this.Get(1,0) * this.Get(2,3) * this.Get(3,1) + this.Get(0,0) * this.Get(1,2) * this.Get(2,3) * this.Get(3,1);
    r = r + this.Get(0,3) * this.Get(1,1) * this.Get(2,0) * this.Get(3,2) - this.Get(0,1) * this.Get(1,3) * this.Get(2,0) * this.Get(3,2);
    r = r - this.Get(0,3) * this.Get(1,0) * this.Get(2,1) * this.Get(3,2) + this.Get(0,0) * this.Get(1,3) * this.Get(2,1) * this.Get(3,2);
    r = r + this.Get(0,1) * this.Get(1,0) * this.Get(2,3) * this.Get(3,2) - this.Get(0,0) * this.Get(1,1) * this.Get(2,3) * this.Get(3,2);
    r = r - this.Get(0,2) * this.Get(1,1) * this.Get(2,0) * this.Get(3,3) + this.Get(0,1) * this.Get(1,2) * this.Get(2,0) * this.Get(3,3);
    r = r + this.Get(0,2) * this.Get(1,0) * this.Get(2,1) * this.Get(3,3) - this.Get(0,0) * this.Get(1,2) * this.Get(2,1) * this.Get(3,3);
    r = r - this.Get(0,1) * this.Get(1,0) * this.Get(2,2) * this.Get(3,3) + this.Get(0,0) * this.Get(1,1) * this.Get(2,2) * this.Get(3,3);
    return r;
  } else {
    float determinant1, determinant2;
    for (int i = 0; i < this.row_count; i++) {
      float temp = 1.0;
      float temp2 = 1.0;
      for (int j = 0; j < this.column_count; j++) {
          temp *= this.Get((i + j) % this.column_count, j);
          temp2 *= this.Get((i + j) % this.column_count, this.row_count - 1 - j);
      }

      determinant1 += temp;
      determinant2 += temp2;
    }

    return determinant1 - determinant2;
  }
  return 0.0;
}

Vec3* Quat::get_AsVec3(){
  Vec3* v = new Vec3;
  v.x = this.x;
  v.y = this.y;
  v.z = this.z;
  return v;
}

Quat* Vec3::get_AsQuat(){
  Quat* q = new Quat;
  q.x = this.x;
  q.y = this.y;
  q.z = this.z;
  return q;
}

static Vec3* Vec3::Create(float x, float y, float  z){
  Vec3* v = new Vec3;
  v.x = x;
  v.y = y;
  v.z = z;
  return v;
}

String Vec3::get_AsString(){
  return String.Format("(%f, %f, %f)", this.x,this.y,this.z);
}

Vec3* Vec3::Set(float x, float y, float  z){
  this.x = x;
  this.y = y;
  this.z = z;
  return this;
}

Vec3* Vec3::Clone(){
  Vec3* v = new Vec3;
  v.x = this.x;
  v.y = this.y;
  v.z = this.z;
  return v;
}

Vec3* Vec3::Add(Vec3* v){
  Vec3* u = new Vec3;
  u.x = this.x + v.x;
  u.y = this.y + v.y;
  u.z = this.z + v.z;
  return u;
}

Vec3* Vec3::AddQuat(Quat* v){
  Vec3* u = new Vec3;
  u.x = this.x + v.x;
  u.y = this.y + v.y;
  u.z = this.z + v.z;
  return u;
}

Vec3* Vec3::Sub(Vec3* v){
  Vec3* u = new Vec3;
  u.x = this.x - v.x;
  u.y = this.y - v.y;
  u.z = this.z - v.z;
  return u;
}

Vec3* Vec3::SubQuat(Quat* v){
  Vec3* u = new Vec3;
  u.x = this.x - v.x;
  u.y = this.y - v.y;
  u.z = this.z - v.z;
  return u;
}

Vec3* Vec3::Mul(Vec3* v){
  Vec3* u = new Vec3;
  u.x = this.x * v.x;
  u.y = this.y * v.y;
  u.z = this.z * v.z;
  return u;
}

Vec3* Vec3::MulQuat(Quat* v){
  Vec3* u = new Vec3;
  u.x = this.x * v.x;
  u.y = this.y * v.y;
  u.z = this.z * v.z;
  return u;
}

Vec3* Vec3::Div(Vec3* v){
  Vec3* u = new Vec3;
  u.x = this.x / v.x;
  u.y = this.y / v.y;
  u.z = this.z / v.z;
  return u;
}

Vec3* Vec3::DivQuat(Quat* v){
  Vec3* u = new Vec3;
  u.x = this.x / v.x;
  u.y = this.y / v.y;
  u.z = this.z / v.z;
  return u;
}


Vec3* Vec3::Scale(float s){
  Vec3* u = new Vec3;
  u.x = this.x * s;
  u.y = this.y * s;
  u.z = this.z * s;
  return u;
}

float Vec3::get_Length(){
  return Maths.Sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
}

Vec3* Vec3::get_Normalize(){
  return this.Scale(1.0/this.get_Length());
}

float Vec3::Distance(Vec3* v){
  Vec3* u = this.Sub(v);
  return u.get_Length();
}

float Vec3::DistanceQuat(Quat* v){
  Vec3* u = this.SubQuat(v);
  return u.get_Length();
}


float Vec3::Dot(Vec3* v){
  return this.x * v.x + this.y * v.y + this.z * v.z;
}

float Vec3::DotQuat(Quat* v){
  return this.x * v.x + this.y * v.y + this.z * v.z;
}

float Vec3::Angle(Vec3* v){
  return Maths.ArcCos(this.Dot(v) / (this.get_Length() + v.get_Length()));
}

float Vec3::AngleQuat(Quat* v){
  return Maths.ArcCos(this.DotQuat(v) / (this.get_Length() + v.AsVec3.get_Length()));
}

Vec3* Vec3::Cross(Vec3* v){
  Vec3* u = new Vec3;

  float a,b,c;
  a=this.x;
  b=this.y;
  c=this.z;

  u.x = b * v.z - c * v.y;
  u.y = c * v.x - a * v.z;
  u.z = a * v.y - b * v.x;

  return u;
}

Vec3* Vec3::CrossQuat(Quat* v){
  Vec3* u = new Vec3;

  float a,b,c;
  a=this.x;
  b=this.y;
  c=this.z;

  u.x = b * v.z - c * v.y;
  u.y = c * v.x - a * v.z;
  u.z = a * v.y - b * v.x;

  return u;
}

Vec3* Vec3::Lerp(Vec3* v,  float t){
  Vec3* u = new Vec3;
  u.x = this.x + (v.x - this.x) * t;
  u.y = this.y + (v.y - this.y) * t;
  u.z = this.z + (v.z - this.z) * t;
  return u;
}

Vec3* Vec3::Project(Vec3* v){
  Vec3* vnorm = v.Normalize;
  float dot = this.Dot(vnorm);
  Vec3* u = new Vec3;
  u.x = vnorm.x * dot;
  u.y = vnorm.y * dot;
  u.z = vnorm.z * dot;
  return u;
}

Vec3* Vec3::Rotate(Quat* q){
  Vec3* u, o, c;

  u = Vec3.Create(q.x, q.y, q.z);
  o=this.Clone();
  c=u.Cross(this);
  float uu = u.Dot(u);
  float uthis = u.Dot(this);
  o=o.Scale(q.w * q.w - uu);
  u=u.Scale(2.0 * uthis);
  c=c.Scale(2.0 * q.w);
  return o.Add(u.Add(c));
}


static Quat* Quat::Create(float x, float y, float  z, float  w){
  Quat* v = new Quat;
  v.x = x;
  v.y = y;
  v.z = z;
  v.w = w;
  return v;
}

String Quat::get_AsString(){
  return String.Format("(%f, %f, %f, %f)", this.x,this.y,this.z,this.w);
}

Quat* Quat::Set(float x, float y, float  z, float  w){
  this.x = x;
  this.y = y;
  this.z = z;
  this.w = w;
  return this;
}

Quat* Quat::Clone(){
  Quat* v = new Quat;
  v.x = this.x;
  v.y = this.y;
  v.z = this.z;
  v.w = this.w;
  return v;
}

Quat* Quat::Add(Quat* v){
  Quat* u = new Quat;
  u.x = this.x + v.x;
  u.y = this.y + v.y;
  u.z = this.z + v.z;
  u.w = this.w + v.w;
  return u;
}

Quat* Quat::AddVec3(Vec3* v){
  Quat* u = new Quat;
  u.x = this.x + v.x;
  u.y = this.y + v.y;
  u.z = this.z + v.z;
  u.w = this.w;
  return u;
}

Quat* Quat::Sub(Quat* v){
  Quat* u = new Quat;
  u.x = this.x - v.x;
  u.y = this.y - v.y;
  u.z = this.z - v.z;
  u.w = this.w - v.w;
  return u;
}

Quat* Quat::SubVec3(Vec3* v){
  Quat* u = new Quat;
  u.x = this.x - v.x;
  u.y = this.y - v.y;
  u.z = this.z - v.z;
  u.w = this.w;
  return u;
}

Quat* Quat::Mul(Quat* v){
  Quat* u = new Quat;
  float qx,  qy, qz, qw;
  float rx,  ry, rz, rw;
  qx=this.x;
  qy=this.y;
  qz=this.z;
  qw=this.w;
  rx=v.x;
  ry=v.y;
  rz=v.z;
  rw=v.w;

  u.x = qx * rw + qw * rx + qy * rz - qz * ry;
  u.y = qy * rw + qw * ry + qz * rx - qx * rz;
  u.z = qz * rw + qw * rz + qx * ry - qy * rx;
  u.w = qw * rw - qx * rx - qy * ry - qz * rz;

  return u;
}

Quat* Quat::MulVec3(Vec3* v){
  Quat* u = new Quat;
  float qx,  qy, qz, qw;
  float rx,  ry, rz, rw;
  qx=this.x;
  qy=this.y;
  qz=this.z;
  qw=this.w;
  rx=v.x;
  ry=v.y;
  rz=v.z;

  u.x = qx * rw + qw * rx + qy * rz - qz * ry;
  u.y = qy * rw + qw * ry + qz * rx - qx * rz;
  u.z = qz * rw + qw * rz + qx * ry - qy * rx;
  u.w = qw * rw - qx * rx - qy * ry - qz * rz;

  return u;
}

Quat* Quat::Scale(float s){
  Quat* u = new Quat;
  u.x = this.x * s;
  u.y = this.y * s;
  u.z = this.z * s;
  u.w = this.w * s;
  return u;
}

float Quat::get_Length(){
  return Maths.Sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
}

Quat* Quat::get_Normalize(){
  return this.Scale(1.0/this.get_Length());
}

float Quat::Distance(Quat* v){
  Quat* u = this.Sub(v);
  return u.get_Length();
}

float Quat::DistanceVec3(Vec3* v){
  Quat* u = this.SubVec3(v);
  return u.get_Length();
}

float Quat::Dot(Quat* v){
  return this.x * v.x + this.y * v.y + this.z * v.z + this.w * v.w;
}

float Quat::DotVec3(Vec3* v){
  return this.x * v.x + this.y * v.y + this.z * v.z ;
}

float Quat::Angle(Quat* v){
  return Maths.ArcCos(this.Dot(v) / (this.get_Length() + v.get_Length()));
}

float Quat::AngleVec3(Vec3* v){
  return Maths.ArcCos(this.DotVec3(v) / (this.get_Length() + v.get_Length()));
}

Quat* Quat::Lerp(Quat* v,  float t){
  Quat* u = new Quat;
  u.x = this.x + (v.x - this.x) * t;
  u.y = this.y + (v.y - this.y) * t;
  u.z = this.z + (v.z - this.z) * t;
  u.w = this.w + (v.w - this.w) * t;
  return u;
}

Quat* Quat::LerpVec3(Vec3* v,  float t){
  Quat* u = new Quat;
  u.x = this.x + (v.x - this.x) * t;
  u.y = this.y + (v.y - this.y) * t;
  u.z = this.z + (v.z - this.z) * t;
  u.w = this.w;
  return u;
}

Quat* Quat::setAngleAxis(float angle){
  float s = Maths.Sin(angle * 0.5);
  float c = Maths.Cos(angle * 0.5);
  Quat* q = this.Clone();
  q.x = q.x*s;
  q.y = q.y*s;
  q.z = q.z*s;
  q.w = c;
  return q;
}

Quat* Quat::getAngleAxis(){
  Quat* q;

  if(this.w > 1.0 || this.w < -1.0)
    q = this.Normalize;

  float s = Maths.Sqrt(1.0 - q.w * q.w);
  if(s<0.0001){
    s = 1.0;
  } else {
    s = 1.0/s;
  }

  Quat* rq = new Quat;

  rq.x  = 2.0 * Maths.ArcCos(q.w);
  rq.y = q.x * s;
  rq.z = q.y * s;
  rq.w = q.z * s;

  return rq;
}
