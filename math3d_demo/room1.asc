// room script file
#define THINGS_COUNT 112

#define GRASS_COUNT 111

#define PLAYER_ID 0

#define PLAYER_STEP 0.005

#define LAMP_COUNT 13

int _frame;
Transform3D cam;
Overlay* _ovr_black;

struct LampOvr
{
  //Overlay* o;
  Object* o;
  DynamicSprite* spr;
};

LampOvr _lamp[LAMP_COUNT];

int things_count;

struct Cam3D
{
  float pos_x, pos_y, pos_z;
  float scale_x, scale_y, scale_z;
  float rot_x, rot_y, rot_z;
};

float _prev_player_x, _prev_player_y;

Cam3D _cam3d;

float ClampFloat(float f, float max, float min){
  if(f>max) return max;
  if(f<min) return min;
  return f;
}

struct WorldThings{
  Character* c;
  float x;
  float y;
  float z;
};

WorldThings thing[THINGS_COUNT];

function room_AfterFadeIn()
{
 // Matrix* m = Matrix.CreateFromString("{{2, 3, 6},{8, 5, 7}}");

 // Display(m.AsString);
}

void reset_cam()
{
  _cam3d.pos_x = 0.0; //-1.5;
  _cam3d.pos_y = 1.0; //-2.0;
  _cam3d.pos_z = 2.48; 
  _cam3d.scale_x = 0.315; //0.97; //2.39;
  _cam3d.scale_y = 0.18; //0.4; //1.145;
  _cam3d.scale_z = 0.93;
  _cam3d.rot_x = -0.05; //0.55; //2.4;
  _cam3d.rot_y = -0.11; //-2.35; ////0.446;
  _cam3d.rot_z = -3.09; //0.7288; //0.219;
}
  

void UpdateThingsOnScreen(){
  for(int i=0; i<things_count; i++){
    ScreenPoint* sp = cam.WorldToScreen(thing[i].x , thing[i].y , thing[i].z);
    Character* c = thing[i].c;
    //if(i==0)
    //{
    //  Display("( %f ; %f ) ID: %d", thing[i].x, thing[i].y, thing[i].c.ID);      
    //}

    c.x = sp.x;
    c.y = sp.y;
    //c.Baseline = FloatToInt(sp.w*1000.0);
    c.Scaling = FloatToInt(ClampFloat(100.0*((1.0/sp.w)), 200.0, 10.0));
    //c.Scaling = FloatToInt(ClampFloat(100.0*(sp.z), 200.0, 10.0));
    //if(sp.is_visible) c.Transparency = 0;
    //else c.Transparency = 100;
  }
  
  
  ScreenPoint* sp_1 = cam.WorldToScreen(2.0 , 2.0 , 2.0);
  ScreenPoint* sp_2 = cam.WorldToScreen(-2.0 , 2.0 , 2.0);
  ScreenPoint* sp_3 = cam.WorldToScreen(2.0 , -2.0 , 2.0);
  ScreenPoint* sp_4 = cam.WorldToScreen(-2.0 , -2.0 , 2.0);
  
  DrawingSurface* srf = Room.GetDrawingSurfaceForBackground();
  
  srf.Clear(0);
  srf.DrawingColor = 2095;
  srf.DrawTriangle(sp_1.x, sp_1.y, sp_2.x, sp_2.y, sp_3.x, sp_3.y);
  srf.DrawTriangle(sp_2.x, sp_2.y, sp_3.x, sp_3.y, sp_4.x, sp_4.y);
  srf.Release();
  
 // srf = Room.GetDrawingSurfaceForBackground();
  
 // srf.DrawingColor = 48388;
 // srf.DrawTriangle(sp_1.x, sp_1.y, sp_2.x, sp_2.y, sp_3.x, sp_3.y);
 // srf.DrawTriangle(sp_2.x, sp_2.y, sp_3.x, sp_3.y, sp_4.x, sp_4.y);
 // srf.Release();
  
  
}

void setThing(int i, Character* c, float x, float y, float z){
  thing[i].c = c;
  thing[i].x = x;
  thing[i].y = y;
  thing[i].z = z;
  
  c.ManualScaling = true;
}

void InitThingsInWorld(){
  int grass_count = GRASS_COUNT;
  Character* grass[GRASS_COUNT];
  for(int i=0; i<grass_count; i++)
  {
    grass[i] = character[i+1];
    grass[i].ChangeView(VIEW_PLANT_A+Random(7));
  }
  
  for(int i=0; i<grass_count; i++)
  {
    setThing(i+1, grass[i], 2.0 - 4.0*IntToFloat(Random(100))/100.0, 2.0 - 4.0*IntToFloat(Random(100))/100.0, 2.0);
    
  }
  
  setThing(PLAYER_ID, cBlock, 0.0, 0.0, 2.0);
  things_count = THINGS_COUNT;
  
  for(int i=0; i<LAMP_COUNT; i++)
  {
    DynamicSprite* spr = DynamicSprite.Create(9*(i+1), 9*(i+1), true);
    DrawingSurface* surf = spr.GetDrawingSurface();
    
    surf.DrawingColor = 65231;
    surf.DrawCircle(3*(i+1), 3*(i+1), (1+i)*2);
    surf.Release();
    
    _lamp[i].spr = DynamicSprite.Create(6*(i+1), 6*(i+1), true);
    DrawingSurface* surf2 = _lamp[i].spr.GetDrawingSurface();
    surf2.DrawImage(0, 0, spr.Graphic, 80);
    surf2.Release();
    
    _lamp[i].o = object[i]; // Overlay.CreateGraphical(0, 0, _lamp[i].spr.Graphic, true);
    _lamp[i].o.Graphic = _lamp[i].spr.Graphic;
  }
}

Vec3* _vdir;
Vec3* _vlamp;
DynamicSprite* _spr_black;
void UpdateLamp()
{
  _vlamp = _vdir.Scale(0.05);
  
  for(int i=0; i<LAMP_COUNT; i++)
  {
    ScreenPoint* sp = cam.WorldToScreen(thing[PLAYER_ID].x + _vlamp.x * IntToFloat(i) ,
                                        thing[PLAYER_ID].y + _vlamp.y * IntToFloat(i) , thing[PLAYER_ID].z);
    _lamp[i].o.X = sp.x - 3*i;
    _lamp[i].o.Y = sp.y + 3*i;
   // _lamp[i].o.Baseline = FloatToInt(sp.w*1000.0);
  }  
  

}



void setInitCamControls(float x, float y,  float z, float sx, float sy, float sz,  float rx, float ry, float rz){
  //sld_cam_x.Value = FloatToInt(x*500.0/20.0+500.0);
  //sld_cam_y.Value = FloatToInt(y*500.0/20.0+500.0);
  //sld_cam_z.Value = FloatToInt(z*500.0/20.0+500.0);
  
  //sld_cam_sx.Value = FloatToInt(sx*1000.0/5.0);
  //sld_cam_sy.Value = FloatToInt(sy*1000.0/5.0);
  //sld_cam_sz.Value = FloatToInt(sz*1000.0/5.0);
  
  //sld_cam_rx.Value = FloatToInt(rx*500.0/Maths.Pi+500.0);
  //sld_cam_ry.Value = FloatToInt(ry*500.0/Maths.Pi+500.0);
  //sld_cam_rz.Value = FloatToInt(rz*500.0/Maths.Pi+500.0);
 
  
  float pos_x, pos_y, pos_z;
  float scale_x, scale_y, scale_z;
  float rot_x, rot_y, rot_z;
  
  _cam3d.pos_x = 20.0*IntToFloat(sld_cam_x.Value-500)/500.0;
  _cam3d.pos_y = 20.0*IntToFloat(sld_cam_y.Value-500)/500.0;
  _cam3d.pos_z = 20.0*IntToFloat(sld_cam_z.Value-500)/500.0;

  _cam3d.scale_x = 5.0*IntToFloat(sld_cam_sx.Value)/1000.0;
  _cam3d.scale_y = 5.0*IntToFloat(sld_cam_sy.Value)/1000.0;
  _cam3d.scale_z = 5.0*IntToFloat(sld_cam_sz.Value)/1000.0;

  _cam3d.rot_x = Maths.Pi*IntToFloat(sld_cam_rx.Value-500)/500.0;
  _cam3d.rot_y = Maths.Pi*IntToFloat(sld_cam_ry.Value-500)/500.0;
  _cam3d.rot_z = Maths.Pi*IntToFloat(sld_cam_rz.Value-500)/500.0;
  
  label_cam_x.Text = String.Format("x%f", _cam3d.pos_x);
  label_cam_y.Text = String.Format("y%f", _cam3d.pos_y);
  label_cam_z.Text = String.Format("z%f", _cam3d.pos_z);

  label_cam_sx.Text = String.Format("x%f", _cam3d.scale_x);
  label_cam_sy.Text = String.Format("y%f", _cam3d.scale_y);
  label_cam_sz.Text = String.Format("z%f", _cam3d.scale_z);

  label_cam_rx.Text = String.Format("x%f", _cam3d.rot_x);
  label_cam_ry.Text = String.Format("y%f", _cam3d.rot_y);
  label_cam_rz.Text = String.Format("z%f", _cam3d.rot_z);
}

void UpdateCameraTransform(bool IsSldUpdate){

  if(IsSldUpdate)
  {
    _cam3d.pos_x = 20.0*IntToFloat(sld_cam_x.Value-500)/500.0;
    _cam3d.pos_y = 20.0*IntToFloat(sld_cam_y.Value-500)/500.0;
    _cam3d.pos_z = 20.0*IntToFloat(sld_cam_z.Value-500)/500.0;

    _cam3d.scale_x = 5.0*IntToFloat(sld_cam_sx.Value)/1000.0;
    _cam3d.scale_y = 5.0*IntToFloat(sld_cam_sy.Value)/1000.0;
    _cam3d.scale_z = 5.0*IntToFloat(sld_cam_sz.Value)/1000.0;

    _cam3d.rot_x = Maths.Pi*IntToFloat(sld_cam_rx.Value-500)/500.0;
    _cam3d.rot_y = Maths.Pi*IntToFloat(sld_cam_ry.Value-500)/500.0;
    _cam3d.rot_z = Maths.Pi*IntToFloat(sld_cam_rz.Value-500)/500.0;
  }
  else 
  {
    sld_cam_x.Value = FloatToInt(_cam3d.pos_x*500.0/20.0+500.0);
    sld_cam_y.Value = FloatToInt(_cam3d.pos_y*500.0/20.0+500.0);
    sld_cam_z.Value = FloatToInt(_cam3d.pos_z*500.0/20.0+500.0);
  
    sld_cam_sx.Value = FloatToInt(_cam3d.scale_x*1000.0/5.0);
    sld_cam_sy.Value = FloatToInt(_cam3d.scale_y*1000.0/5.0);
    sld_cam_sz.Value = FloatToInt(_cam3d.scale_z*1000.0/5.0);
  
    sld_cam_rx.Value = FloatToInt(_cam3d.rot_x*500.0/Maths.Pi+500.0);
    sld_cam_ry.Value = FloatToInt(_cam3d.rot_y*500.0/Maths.Pi+500.0);
    sld_cam_rz.Value = FloatToInt(_cam3d.rot_z*500.0/Maths.Pi+500.0);  
  }

  label_cam_x.Text = String.Format("x%f", _cam3d.pos_x);
  label_cam_y.Text = String.Format("y%f", _cam3d.pos_y);
  label_cam_z.Text = String.Format("z%f", _cam3d.pos_z);

  label_cam_sx.Text = String.Format("x%f", _cam3d.scale_x);
  label_cam_sy.Text = String.Format("y%f", _cam3d.scale_y);
  label_cam_sz.Text = String.Format("z%f", _cam3d.scale_z);

  label_cam_rx.Text = String.Format("x%f", _cam3d.rot_x);
  label_cam_ry.Text = String.Format("y%f", _cam3d.rot_y);
  label_cam_rz.Text = String.Format("z%f", _cam3d.rot_z);

  Vec3* v3pos = Vec3.Create(_cam3d.pos_x, _cam3d.pos_y, _cam3d.pos_z);
  Vec3* v3scale = Vec3.Create(_cam3d.scale_x, _cam3d.scale_y, _cam3d.scale_z);
  Vec3* v3rot = Vec3.Create(_cam3d.rot_x, _cam3d.rot_y, _cam3d.rot_z);

  cam.SetCameraTransform(v3pos, v3scale, v3rot);
}

void on_key_press (eKeyCode keycode)
{
  if(keycode == eKey1)
  {
    gCamDebug.Visible = !gCamDebug.Visible;
    gGUIDebug.Visible =  gCamDebug.Visible;
  }
}


void UpdateDebugText()
{
  if(!gGUIDebug.Visible) return;
  String dbgtxt = "";
  Character* c = cBlock;
 
  dbgtxt = dbgtxt.Append(
    String.Format(
      "%s x=%d y=%d sc=%d t=%d[",
      c.Name, c.x, c.y, c.Scaling, c.Transparency));
      
  dbgtxt = dbgtxt.Append(
    String.Format(
      "fx=%f fy=%f fz=%f[",
      thing[PLAYER_ID].x, thing[PLAYER_ID].y, thing[PLAYER_ID].z));
  label_debug.Text = dbgtxt;
}

void UpdateCameraFollowPlayer()
{
  _cam3d.pos_x = _cam3d.pos_x - _prev_player_x + thing[PLAYER_ID].x;
  _cam3d.pos_y = _cam3d.pos_y - _prev_player_y + thing[PLAYER_ID].y;
  UpdateCameraTransform(false);
  UpdateDebugText();
}

void repeatedly_execute_always()
{
  _frame++;
  bool changed = false;
  
  int vx = mouse.x - cBlock.x;
  int vy = cBlock.y-mouse.y;
  _vlamp = Vec3.Create(IntToFloat(vx), IntToFloat(vy));
  _vdir = _vlamp.Normalize;
  
  if(IsKeyPressed(eKeyUpArrow) || IsKeyPressed(eKeyW)){
   
    thing[PLAYER_ID].x=thing[PLAYER_ID].x + _vdir.x*0.01*IntToFloat((_frame%19)+1)/20.0;
    thing[PLAYER_ID].y=thing[PLAYER_ID].y + _vdir.y*0.01*IntToFloat((_frame%19)+1)/20.0;
    changed = true;
  }
  if(IsKeyPressed(eKeyDownArrow) || IsKeyPressed(eKeyS)){
    
    thing[PLAYER_ID].x=thing[PLAYER_ID].x - _vdir.x*0.01*IntToFloat((_frame%19)+1)/20.0;
    thing[PLAYER_ID].y=thing[PLAYER_ID].y - _vdir.y*0.01*IntToFloat((_frame%19)+1)/20.0;
    changed = true;
  }
  if(IsKeyPressed(eKeyRightArrow) || IsKeyPressed(eKeyD)){
    thing[PLAYER_ID].x=thing[PLAYER_ID].x+PLAYER_STEP;
    changed = true;
  }
  if(IsKeyPressed(eKeyLeftArrow) || IsKeyPressed(eKeyA)){
    thing[PLAYER_ID].x=thing[PLAYER_ID].x-PLAYER_STEP;
    changed = true;
  }

  if(changed) 
  {
    UpdateCameraFollowPlayer();
    UpdateThingsOnScreen();
  }
  UpdateLamp();
  _prev_player_x = thing[PLAYER_ID].x;
  _prev_player_y = thing[PLAYER_ID].y;
}


int updates_cam;
void on_call(int n){
  if(n >= 990 && n<999){
    UpdateCameraTransform(true);
    UpdateThingsOnScreen();
    UpdateDebugText();
    updates_cam++;
    
  }

}

function room_Load()
{
  _spr_black = DynamicSprite.Create(320, 180, true);
  things_count =21;

  sld_cam_x.Min = 0;
  sld_cam_x.Max = 1000;
  sld_cam_x.Value = 508;

  sld_cam_y.Min = 0;
  sld_cam_y.Max = 1000;
  sld_cam_y.Value = 464;

  sld_cam_z.Min = 0;
  sld_cam_z.Max = 1000;
  sld_cam_z.Value = 482;

  sld_cam_sx.Min = 10;
  sld_cam_sx.Max = 1000;
  sld_cam_sx.Value = 450;

  sld_cam_sy.Min = 10;
  sld_cam_sy.Max = 1000;
  sld_cam_sy.Value = 229;

  sld_cam_sz.Min = 10;
  sld_cam_sz.Max = 1000;
  sld_cam_sz.Value = 169;

  sld_cam_rx.Min = 0;
  sld_cam_rx.Max = 1000;
  sld_cam_rx.Value = 882;

  sld_cam_ry.Min = 0;
  sld_cam_ry.Max = 1000;
  sld_cam_ry.Value = 571;

  sld_cam_rz.Min = 0;
  sld_cam_rz.Max = 1000;
  sld_cam_rz.Value = 535;

  cam.Init();
  cam.SetSurfaceSize(320.0, 80.0);
  cam.SetPosition(0, 0, 320, 120);
  //cam.SetOrthoProjection(1.0, 1.0, 0.1, 2000.0);
  //cam.SetPerspectiveProjection(90.0, 0.1, 2000.0);
  cam.SetPerspectiveProjection(60.0, 0.1, 2000.0);

  cam.SetCameraTransform(
    Vec3.Create(-8.5, -236.6, 391.5),
    Vec3.Create(1.0, 1.0, 1.0),
    Vec3.Create(2.718, 0.001, 0.0));
    
  setInitCamControls(-8.5, -236.6, 391.5, 1.0, 1.0, 1.0, 2.718, 0.001, 0.0);

  InitThingsInWorld();
  on_call(991);
  reset_cam();
  UpdateCameraFollowPlayer();
  UpdateThingsOnScreen();

}
