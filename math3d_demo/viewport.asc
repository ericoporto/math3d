// -- TODO: reimplement to support multiple instances (singletons aren't good)
// function ViewportType.new(cam_pos, cam_scale, cam_rot, projection, ndc_size, surf_size)
//     local v = setmetatable({}, ViewportMetaTable)
//     -- position on the surface
//     v.x = 0
//     v.y = 0
//     v.width = 1
//     v.height = 1
//     -- transform matrixes used to convert between 3D space and the flat surface
//     v.camToWorld = trans.createM44()
//     v.projectMtx = trans.createM44()
//     v.worldToCam = trans.createM44()
//     v.frustrum = { near = 0, far = 1000}
//     -- NDC space size
//     v.ndcSize = { w = 2, h = 2 }
//     -- final 2D surface size
//     v.surfSize = { w = 1, h = 1 }
//     return v
// end


// new module script
void Transform3D::Init(){
  this.X = 0;
  this.Y = 0;
  this.Width = 320;
  this.Height = 180;
  this.CamToWorld = Transform.Create();
  this.ProjectMtx = Transform.Create();
  this.WorldToCam = Transform.Create();
  this.frustrum_near = 1.0;
  this.frustrum_far = 1000.0;
  this.ndcSize_w = 2.0;
  this.ndcSize_h = 2.0;
  this.surfsize_w = 1.0;
  this.surfsize_h = 1.0;
}

void Transform3D::SetPosition( int x, int y, int  width, int height){
  this.X = x;
  this.Y = y;
  this.Width = width;
  this.Height = height;
}

void Transform3D::SetCameraTransform( Vec3* cam_pos, Vec3* cam_scale, Vec3* cam_rot){
  if(this.CamToWorld == null) this.CamToWorld = Transform.Create();

  this.CamToWorld.SetFullTransform(
    cam_pos.x, cam_pos.y, cam_pos.z,
    cam_scale.x,  cam_scale.y,  cam_scale.z,
    cam_rot.x, cam_rot.y, cam_rot.z);

  this.WorldToCam = this.CamToWorld.Invert44();
}

void Transform3D::SetOrthoProjection(float width, float height, float near, float far){
  if(this.ProjectMtx == null) this.ProjectMtx = Transform.Create();

  this.frustrum_near = near; //good default is 1
  this.frustrum_far = far; //good default is 1000

  this.ProjectMtx.SetOrthographicProjection(
    -width/2.0, width/2.0, -height/2.0, height/2.0,
    this.frustrum_near, this.frustrum_far);
}

void Transform3D::SetPerspectiveProjection(float fov, float near, float far){
  if(this.ProjectMtx == null) this.ProjectMtx = Transform.Create();

  float _fov = Maths.DegreesToRadians(fov);
  this.frustrum_near = near; //good default is 1
  this.frustrum_far = far; //good default is 1000

  this.ProjectMtx.SetPerspectiveProjection(fov, fov, this.frustrum_near, this.frustrum_far);
}

void Transform3D::SetSurfaceSize(float width, float height){
  this.surfsize_w = width;
  this.surfsize_h = height;
}

ScreenPoint* Transform3D::WorldToScreen(float x, float y, float z){

  float w = 1.0;

  // world -> view space (camera)
  Quat* view_space = this.WorldToCam.DoTransform( x, y, z, w);

  bool is_visible = (z >= this.frustrum_near && z <= this.frustrum_far);

  // view space -> projection space
  Quat* projection_space = this.ProjectMtx.DoTransformQuat(view_space);

  // at this point if Abs[v.x] > Abs[v.w] or Abs[v.y] > Abs[v.w], then point is outside projection cone
  is_visible = is_visible &&
    (Abs(projection_space.x) > Abs(projection_space.w) ||
     Abs(projection_space.y) > Abs(projection_space.w));

  x = projection_space.x;
  y = projection_space.y;
  z = projection_space.z;
  w = projection_space.w;

  float muldiv = 0.0;
  if(Abs(w) != 0.0) muldiv = 1.0/w;

  x = x * muldiv;
  y = y * muldiv;
  z = z * muldiv;

  // NOTE: at this point visible vertexes lie inside x,y [-1 : 1].
  // NDC Space [0,1] normalized coordinates

  x = (x + this.ndcSize_w * 0.5) / this.ndcSize_w;
  y = (y + this.ndcSize_h * 0.5) / this.ndcSize_h;

  // NDC Space ===> Raster space.
  // Finally convert to pixel coordinates. Don't forget to invert the y coordinate

  ScreenPoint* res = new ScreenPoint;

  res.x = FloatToInt(x * this.surfsize_w);
  res.y = FloatToInt((1.0 - y) * this.surfsize_h);
  res.z = z;
  res.w = w;
  res.is_visible = is_visible;

  return res;
}
